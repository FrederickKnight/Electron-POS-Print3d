---
import {fetchData} from "@lib/fetch_data"
import type {Sale,ErrorSale,Ticket,GeneralPrice,} from "@database_types"

// DICCIONARIO ESPECIAL PARA PODER PASAR UN TYPO COMO PROP
type TypeDict = {
    sale: Sale;
    ErrorSale: ErrorSale;
    ticket: Ticket;
    general_price: GeneralPrice;
}

// Extends para que entienda que typeKey es para los typos del dict
export interface Props<K extends keyof TypeDict>{
    endpoint:string;
    typeKey: K;
}

// as usado para que entienda y poder sacar el SelectedType
const {endpoint,typeKey} = Astro.props as Props<keyof TypeDict>;

type SelectedType = TypeDict[typeof typeKey];

const data = await fetchData<SelectedType>(endpoint);

function formatKey(key: string): string {
    return key
        .split('_') // Divide la clave en partes usando `_` como separador
        .map((part) => part.charAt(0).toUpperCase() + part.slice(1)) // Capitaliza la primera letra de cada parte
        .join(' '); // Une las partes con un espacio
}

function handleClick(){
    console.log("gola")
}
---

<div>
    {data && data.length > 0 ? (
        <table>
            <thead>
                {[ "id",
                    ...Object.keys(data[0]).filter((key) => key !== "id")
                ].map((key,index) => (
                    <th class={`header-${index}`}>{formatKey(key)}</th>
                ))}
            </thead>
            <tbody>
                {data.map((item, rowIndex) => (
                    <tr>
                        {[
                            "id",
                            ...Object.keys(item).filter((key) => key !== "id"),
                        ].map((key, colIndex) => (
                            <td
                            id={`row-${rowIndex}-col-${colIndex}`}>
                                {item[key as keyof SelectedType]}
                                </td>
                        ))}
                    </tr>
                ))}
            </tbody>
        </table>
    ) : (
        <p>No data available</p>
    )}
</div>
<style>
    table{
        width: 100%;
        margin: 10px 0;
        
    }
    
    th,td {
        text-align: center;
    }

    

    tr:nth-child(even){
        background-color: rgb(118, 116, 116);
    }

    tr:hover {
        background-color: #dcdedf;
        transition: background-color 0.2s ease;
        color: black;
        font-weight: bold;
    }

    p {
        font-size: 16px;
        color: #6b7280;
        text-align: center;
        margin: 20px 0;
    }
</style>